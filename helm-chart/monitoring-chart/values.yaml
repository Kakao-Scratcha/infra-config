# kube-prometheus-stack 설정
kube-prometheus-stack:
  enabled: true
  # CRD 생성 비활성화
  crds:
    create: false
  
  # Prometheus 설정
  prometheus:
    enabled: true
    prometheusSpec:
      retention: 30d
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: csi-cinder-sc-retain
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      resources:
        requests:
          memory: "512Mi"
          cpu: "250m"
        limits:
          memory: "1Gi"
          cpu: "500m"
      nodeSelector:
        kakaoi.io/kke-nodepool: team2-api
      # 기본 설정 사용
      # serviceMonitorSelectorNilUsesHelmValues: false
      # podMonitorSelectorNilUsesHelmValues: false
      # ruleSelectorNilUsesHelmValues: false

  # Grafana 설정
  grafana:
    enabled: true
    admin:
      user: admin
      password: admin123
    persistence:
      enabled: true
      storageClassName: csi-cinder-sc-retain
      size: 1Gi
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "200m"
    nodeSelector:
      kakaoi.io/kke-nodepool: team2-api
    # 시작 시간 늘리기
    startupProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 60
      timeoutSeconds: 5
      failureThreshold: 10
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    grafana.ini:
      server:
        root_url: "http://grafana.monitoring.svc.cluster.local:3000"
      auth.anonymous:
        enabled: false
        org_role: Admin
      security:
        allow_embedding: true
      users:
        allow_sign_up: false
      auth:
        disable_login_form: false
      plugins:
        allow_loading_unsigned_plugins: "*"
      plugin_admin:
        allow_loading_unsigned_plugins: "*"
    extraEnv:
      - name: HTTP_PROXY
        value: "http://10.0.130.50:3128"
      - name: HTTPS_PROXY
        value: "http://10.0.130.50:3128"
      - name: NO_PROXY
        value: "localhost,127.0.0.1,.svc.cluster.local,.cluster.local,10.96.0.0/12,10.244.0.0/16,10.0.0.0/8,kubernetes.default.svc.cluster.local"
      - name: http_proxy
        value: "http://10.0.130.50:3128"
      - name: https_proxy
        value: "http://10.0.130.50:3128"
      - name: no_proxy
        value: "localhost,127.0.0.1,.svc.cluster.local,.cluster.local,10.96.0.0/12,10.244.0.0/16,10.0.0.0/8,kubernetes.default.svc.cluster.local"
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://kube-prometheus-stack-prometheus:9090
            access: proxy
            isDefault: true
          - name: Loki
            type: loki
            url: http://loki-gateway:80
            access: proxy
            isDefault: false
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        # 쿠버네티스 클러스터 모니터링
        kubernetes-cluster-monitoring:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        # 쿠버네티스 파드 모니터링
        kubernetes-pod-monitoring:
          gnetId: 6417
          revision: 1
          datasource: Prometheus
        # Prometheus 자체 모니터링
        prometheus-monitoring:
          gnetId: 3662
          revision: 1
          datasource: Prometheus
        # 쿠버네티스 로그 모니터링
        kubernetes-logs:
          gnetId: 15141
          revision: 1
          datasource: Loki

  # AlertManager 설정
  alertmanager:
    enabled: true
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: csi-cinder-sc-retain
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 1Gi
      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "100m"
      nodeSelector:
        kakaoi.io/kke-nodepool: team2-api

  # kube-state-metrics 설정
  kubeStateMetrics:
    enabled: true
    resources:
      requests:
        memory: "64Mi"
        cpu: "25m"
      limits:
        memory: "128Mi"
        cpu: "50m"
    nodeSelector:
      kakaoi.io/kke-nodepool: team2-api

  # node-exporter 설정
  nodeExporter:
    enabled: true
    resources:
      requests:
        memory: "64Mi"
        cpu: "25m"
      limits:
        memory: "128Mi"
        cpu: "50m"
    nodeSelector:
      kakaoi.io/kke-nodepool: team2-api

  # kubelet 설정
  kubelet:
    enabled: true
    serviceMonitor:
      interval: 30s

  # 기본 서비스 모니터링 활성화 (단순화)
  defaultRules:
    create: true
    rules:
      alertmanager: true
      general: true
      k8s: true
      kubelet: true
      kubeStateMetrics: true
      node: true
      prometheus: true

  # 네임스페이스 설정
  namespaceOverride: "monitoring"
  namespace: "monitoring"
